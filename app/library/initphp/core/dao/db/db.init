/** 
	 * SQL操作-插入一条数据
	 * DAO中使用方法：$this->dao->db->insert($data, $table_name)
	 * @param array  $data array('key值'=>'值')
	 * @param string $table_name 表名
	 * @return id
	 */
	public function insert($data, $table_name) {
		if (!is_array($data) || empty($data)) return 0;
		$data = $this->build_insert($data);
		$sql = sprintf("INSERT INTO %s %s", $table_name, $data);
		$result = $this->query($sql, false);
		if (!$result) return 0;
		$id = $this->insert_id();
		$this->set_default_link_id(); //设置默认的link_id
		return $id;
	}
	
	/**
	 * SQL操作-插入多条数据
	 * DAO中使用方法：$this->dao->db->insert_more($field, $data, $table_name)
	 * @param array $field 字段
	 * @param array $data  对应的值，array(array('test1'),array('test2'))
	 * @param string $table_name 表名
	 * @return id
	 */
	public function insert_more($field, $data, $table_name) {
		if (!is_array($data) || empty($data)) return false;
		if (!is_array($field) || empty($field)) return false;
		$sql = $this->build_insertmore($field, $data);
		$sql = sprintf("INSERT INTO %s %s", $table_name, $sql);
		return $this->query($sql);
	}
	
	/**
	 * SQL操作-根据主键id更新数据
	 * DAO中使用方法：$this->dao->db->update($id, $data, $table_name, $id_key = 'id')
	 * @param  int    $id 主键ID
	 * @param  array  $data 参数
	 * @param  string $table_name 表名
	 * @param  string $id_key 主键名
	 * @return bool
	 */
	public function update($id, $data, $table_name, $id_key = 'id') {
		$id = (int) $id;
		if ($id < 1) return false;
		$data = $this->build_update($data);
		$where = $this->build_where(array($id_key=>$id));
		$sql = sprintf("UPDATE %s %s %s", $table_name, $data, $where);
		return $this->query($sql);
	}
	
	/**
	 * SQL操作-根据字段更新数据
	 * DAO中使用方法：$this->dao->db->update_by_field($data, $field, $table_name)
	 * @param  array  $data 参数
	 * @param  array  $field 字段参数
	 * @param  string $table_name 表名
	 * @return bool
	 */
	public function update_by_field($data, $field, $table_name) {
		if (!is_array($data) || empty($data)) return false;
		if (!is_array($field) || empty($field)) return false;
		$data = $this->build_update($data);
		$field = $this->build_where($field);
		$sql = sprintf("UPDATE %s %s %s", $table_name, $data, $field);
		return $this->query($sql);
	}
	
	/**
	 * SQL操作-删除数据
	 * DAO中使用方法：$this->dao->db->delete($ids, $table_name, $id_key = 'id')
	 * @param  int|array $ids 单个id或者多个id
	 * @param  string $table_name 表名
	 * @param  string $id_key 主键名
	 * @return bool
	 */
	public function delete($ids, $table_name, $id_key = 'id') {
		if (is_array($ids)) {
			$ids = $this->build_in($ids);
			$sql = sprintf("DELETE FROM %s WHERE %s %s", $table_name, $id_key, $ids);
		} else {
			$where = $this->build_where(array($id_key=>$ids));
			$sql = sprintf("DELETE FROM %s %s", $table_name, $where);
		}
		return $this->query($sql);
	}
	
	/**
	 * SQL操作-通过条件语句删除数据
	 * DAO中使用方法：$this->dao->db->delete_by_field($field, $table_name)
	 * @param  array  $field 条件数组
	 * @param  string $table_name 表名
	 * @return bool
	 */
	public function delete_by_field($field, $table_name) {
		if (!is_array($field) || empty($field)) return false;
		$where = $this->build_where($field);
		$sql = sprintf("DELETE FROM %s %s", $table_name, $where);
		return $this->query($sql);
	}
	
	/**
	 * SQL操作-获取单条信息
	 * DAO中使用方法：$this->dao->db->get_one($id, $table_name, $id_key = 'id')
	 * @param int    $id 主键ID
	 * @param string $table_name 表名
	 * @param string $id_key 主键名称，默认id
	 * @return array
	 */
	public function get_one($id, $table_name, $id_key = 'id') {
		$id = (int) $id;
		if ($id < 1) return array(); 
		$where = $this->build_where(array($id_key=>$id));
		$sql = sprintf("SELECT * FROM %s %s LIMIT 1", $table_name, $where);
		$result = $this->query($sql, false);
		if (!$result) return false;
		$r = $this->fetch_assoc($result);
		$this->set_default_link_id(); //设置默认的link_id
		return $r;
	}
	
	/**
	 * SQL操作-通过条件语句获取一条信息
	 * DAO中使用方法：$this->dao->db->get_one_by_field($field, $table_name)
	 * @param  array  $field 条件数组 array('username' => 'username')
	 * @param  string $table_name 表名
	 * @return bool
	 */
	public function get_one_by_field($field, $table_name) {
		if (!is_array($field) || empty($field)) return array();
		$where = $this->build_where($field);
		$sql = sprintf("SELECT * FROM %s %s LIMIT 1", $table_name, $where);
		$result = $this->query($sql, false);
		if (!$result) return false;
		$r = $this->fetch_assoc($result);
		$this->set_default_link_id(); //设置默认的link_id
		return $r;
	}
	
	/**
	 * SQL操作-获取单条信息-sql语句方式
	 * DAO中使用方法：$this->dao->db->get_one_sql($sql)
	 * @param  string $sql 数据库语句
	 * @return array
	 */
	public function get_one_sql($sql) {
		$sql = trim($sql . ' ' .$this->build_limit(1));
		$result = $this->query($sql, false);
		if (!$result) return false;
		$r = $this->fetch_assoc($result);
		$this->set_default_link_id(); //设置默认的link_id
		return $r;
	}
	
	/**
	 * SQL操作-获取全部数据
	 * DAO中使用方法：$this->dao->db->get_all()
	 * @param string $table_name 表名
	 * @param array  $field 条件语句
	 * @param int    $num 分页参数
	 * @param int    $offest 获取总条数
	 * @param int    $key_id KEY值
	 * @param string $sort 排序键
	 * @return array array(数组数据，统计数)
	 */
	public function get_all($table_name, $num = 20, $offest = 0, $field = array(), $id_key = 'id', $sort = 'DESC') {
		$where = $this->build_where($field);
		$limit = $this->build_limit($offest, $num);
		$sql = sprintf("SELECT * FROM %s %s ORDER BY %s %s %s", $table_name, $where, $id_key, $sort, $limit);
		$result = $this->query($sql, false);
		if (!$result) return false;
		$temp = array();
		while ($row = $this->fetch_assoc($result)) {
			$temp[] = $row;
		}
		$count = $this->get_count($table_name, $field);
		$this->set_default_link_id(); //设置默认的link_id
		return array($temp, $count);
	}
	
	/**
	 * SQL操作-获取所有数据
	 * DAO中使用方法：$this->dao->db->get_all_sql($sql)
	 * @param string $sql SQL语句
	 * @return array
	 */
	public function get_all_sql($sql) {
		$sql = trim($sql);
		$result = $this->query($sql, false);
		if (!$result) return false;
		while ($row = $this->fetch_assoc($result)) {
			$temp[] = $row;
		}
		$this->set_default_link_id(); //设置默认的link_id
		return $temp;
	}
	
	/**
	 * SQL操作-获取数据总数
	 * DAO中使用方法：$this->dao->db->get_count($table_name, $field = array())
	 * @param  string $table_name 表名
	 * @param  array  $field 条件语句
	 * @return int
	 */
	public function get_count($table_name, $field = array()) {
		$where = $this->build_where($field);
		$sql = sprintf("SELECT COUNT(*) as count FROM %s %s LIMIT 1", $table_name, $where);
		$result = $this->query($sql, false);
		$result =  $this->fetch_assoc($result);
		$this->set_default_link_id(); //设置默认的link_id
		return $result['count'];
	}
	